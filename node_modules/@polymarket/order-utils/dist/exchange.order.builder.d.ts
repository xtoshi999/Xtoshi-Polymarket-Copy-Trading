import { JsonRpcSigner } from '@ethersproject/providers';
import { Wallet } from '@ethersproject/wallet';
import { EIP712TypedData } from './model/eip712.model';
import { Order, OrderData, OrderHash, OrderSignature, SignedOrder } from './model/order.model';
import { generateOrderSalt } from './utils';
export declare class ExchangeOrderBuilder {
    private readonly contractAddress;
    private readonly chainId;
    private readonly signer;
    private readonly generateSalt;
    constructor(contractAddress: string, chainId: number, signer: Wallet | JsonRpcSigner, generateSalt?: typeof generateOrderSalt);
    /**
     * build an order object including the signature.
     * @param orderData
     * @returns a SignedOrder object (order + signature)
     */
    buildSignedOrder(orderData: OrderData): Promise<SignedOrder>;
    /**
     * Creates an Order object from order data.
     * @param OrderData
     * @returns a Order object (not signed)
     */
    buildOrder({ maker, taker, tokenId, makerAmount, takerAmount, side, feeRateBps, nonce, signer, expiration, signatureType, }: OrderData): Promise<Order>;
    /**
     * Parses an Order object to EIP712 typed data
     * @param order
     * @returns a EIP712TypedData object
     */
    buildOrderTypedData(order: Order): EIP712TypedData;
    /**
     * Generates order's signature from a EIP712TypedData object + the signer address
     * @param typedData
     * @returns a OrderSignature that is an string
     */
    buildOrderSignature(typedData: EIP712TypedData): Promise<OrderSignature>;
    /**
     * Generates the hash of the order from a EIP712TypedData object.
     * @param orderTypedData
     * @returns a OrderHash that is an string
     */
    buildOrderHash(orderTypedData: EIP712TypedData): OrderHash;
}
